import os
import json
import random
import datetime
import telebot
from telebot import types
from flask import Flask, request

# === –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ===
TOKEN = "7690089205:AAGv__UITt-E2Q1OYTQYzgI8F8lBROCttHM"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ===
BASE_DIR = os.path.dirname(__file__)
DATA_DIR = os.path.join(BASE_DIR, "data")
USER_DATA_FILE = os.path.join(BASE_DIR, "user_data.json")

def load_json(filename):
    path = os.path.join(DATA_DIR, filename)
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

WORDS = load_json("words.json")
PHRASES = load_json("phrases.json")
GRAMMAR = load_json("grammar.json")

def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_user_data(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

user_data = load_user_data()

topics = {
    "üåø –ê–¥–∞–º –∂”ô–Ω–µ ”©–º—ñ—Ä": {
        "ü´Ä –î–µ–Ω–µ–Ω—ñ“£ –±”©–ª—ñ–∫—Ç–µ—Ä—ñ": "https://quizlet.com/kz/1097300479/anatil–¥–µ–Ω–µ–Ω—ñ“£-–±”©–ª—ñ–∫—Ç–µ—Ä—ñ-—á–∞—Å—Ç–∏-—Ç–µ–ª–∞-flash-cards/",
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –û—Ç–±–∞—Å—ã": "https://quizlet.com/kz/1097570867/anatil-–æ—Ç–±–∞—Å—ã-—Å–µ–º—å—è-flash-cards/",
        "üëó –ö–∏—ñ–º": "https://quizlet.com/kz/1097575466/anatil-–∫–∏—ñ–º-–æ–¥–µ–∂–¥–∞-flash-cards/",
        "üíº –ö”ô—Å—ñ–ø—Ç–µ—Ä": "https://quizlet.com/kz/1097575460/anatil-–∫”ô—Å—ñ–ø—Ç–µ—Ä-–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏-flash-cards/",
        "üòä –≠–º–æ—Ü–∏—è–ª–∞—Ä": "https://quizlet.com/kz/1097582619/anatil—ç–º–æ—Ü–∏—è–ª–∞—Ä-—ç–º–æ—Ü–∏–∏-flash-cards/",
        "üé≠ –°–∏–ø–∞—Ç—Ç–∞—É": "https://quizlet.com/kz/1097582616/anatil—Å–∏–ø–∞—Ç—Ç–∞—É-–æ–ø–∏—Å–∞–Ω–∏–µ-—á–µ–ª–æ–≤–µ–∫–∞-flash-cards/",
        "üß† –ú—ñ–Ω–µ–∑-“õ“±–ª—ã“õ": "https://quizlet.com/kz/1097616655/anatil-–º—ñ–Ω–µ–∑-“õ“±–ª—ã“õ-—Ö–∞—Ä–∞–∫—Ç–µ—Ä-–∏-–ø–æ–≤–µ–¥–µ–Ω–∏–µ-flash-cards/"
    }
}

# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üìö –¢–µ–º—ã"),
        types.KeyboardButton("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"),
        types.KeyboardButton("üí¨ –§—Ä–∞–∑–∞ –¥–Ω—è"),
        types.KeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
    )
    hour = datetime.datetime.now().hour
    greeting = "üåÖ “ö–∞–π—ã—Ä–ª—ã —Ç–∞“£!" if hour < 12 else ("üåá “ö–∞–π—ã—Ä–ª—ã –∫–µ—à!" if hour < 18 else "üåô “ö–∞–π—ã—Ä–ª—ã —Ç“Ø–Ω!")
    phrase = random.choice(PHRASES)["kz"] if PHRASES else "–ë—ñ–ª—ñ–º ‚Äî —Ç–∞–±—ã—Å“õ–∞ –±–∞—Å—Ç–∞—Ä –∂–æ–ª."
    bot.send_message(
        message.chat.id,
        f"‚ú® *AnaTili Bot üá∞üáø*\n{greeting}\n\n"
        f"üí¨ –ö“Ø–Ω–Ω—ñ“£ —Ñ—Ä–∞–∑–∞—Å—ã:\n_{phrase}_\n\n"
        "üìö –¢–µ–º—ã ‚Äî Quizlet —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä—ñ\n"
        "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ‚Äî –∂–∞—Ç—Ç—ã“ì—É–ª–∞—Ä –º–µ–Ω “±–ø–∞–π–ª–∞—Ä\n"
        "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å–µ–Ω—ñ“£ –¥–µ“£–≥–µ–π—ñ“£–¥—ñ –∫”©—Ä—É",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "üí¨ –§—Ä–∞–∑–∞ –¥–Ω—è")
def phrase_day(message):
    if not PHRASES:
        return bot.send_message(message.chat.id, "‚ö†Ô∏è –§—Ä–∞–∑–∞–ª–∞—Ä –±–∞–∑–∞—Å—ã –±–æ—Å.")
    p = random.choice(PHRASES)
    bot.send_message(
        message.chat.id,
        f"üí´ *–ë“Ø–≥—ñ–Ω–≥—ñ —Ñ—Ä–∞–∑–∞:*\n\n"
        f"üá∞üáø {p['kz']}\n"
        f"üá∑üá∫ {p['ru']}\n\n"
        f"üåü _–ú—ã—Å–∞–ª—ã:_ {p.get('example', '–∂–æ“õ')}",
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda m: m.text == "üìö –¢–µ–º—ã")
def show_topics(message):
    markup = types.InlineKeyboardMarkup()
    for t in topics.keys():
        markup.add(types.InlineKeyboardButton(t, callback_data=f"topic|{t}"))
    bot.send_message(message.chat.id, "üìò *Quizlet —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä—ã:*", parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("topic|"))
def show_subtopics(call):
    topic_name = call.data.split("|")[1]
    subtopics = topics[topic_name]
    markup = types.InlineKeyboardMarkup()
    for sub, link in subtopics.items():
        markup.add(types.InlineKeyboardButton(sub, url=link))
    bot.send_message(call.message.chat.id, f"‚ú® *{topic_name}* —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä—ã:", parse_mode="Markdown", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
def quiz(message):
    send_quiz(message.chat.id)

def send_quiz(chat_id):
    if not WORDS:
        return bot.send_message(chat_id, "‚ö†Ô∏è –°”©–∑–¥–µ—Ä –±–∞–∑–∞—Å—ã –±–æ—Å.")
    w = random.choice(WORDS)
    correct = w["ru"]
    options = [correct]
    while len(options) < 4:
        opt = random.choice(WORDS)["ru"]
        if opt not in options:
            options.append(opt)
    random.shuffle(options)
    markup = types.InlineKeyboardMarkup()
    for opt in options:
        markup.add(types.InlineKeyboardButton(opt, callback_data=f"quiz|{w['kz']}|{opt}|{correct}"))
    bot.send_message(chat_id, f"üß† *{w['kz']}* —Å”©–∑—ñ–Ω—ñ“£ –∞—É–¥–∞—Ä–º–∞—Å—ã “õ–∞–Ω–¥–∞–π?", parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("quiz|"))
def quiz_answer(call):
    _, kz, chosen, correct = call.data.split("|")
    uid = str(call.message.chat.id)
    if uid not in user_data:
        user_data[uid] = {"known": [], "score": 0, "xp": 0}
    if chosen == correct:
        user_data[uid]["score"] += 1
        user_data[uid]["xp"] += 10
        msg = f"‚úÖ –î“±—Ä—ã—Å! *{kz}* = {correct}\n+10 XP üî•"
    else:
        msg = f"‚ùå “ö–∞—Ç–µ. –î“±—Ä—ã—Å –∂–∞—É–∞–ø: *{correct}*"
    save_user_data(user_data)
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ñ∂Ô∏è –ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É", callback_data="quiz_next"),
        types.InlineKeyboardButton("‚èπÔ∏è –¢–æ“õ—Ç–∞—Ç—É", callback_data="quiz_stop")
    )
    bot.send_message(call.message.chat.id, msg, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data in ["quiz_next", "quiz_stop"])
def quiz_control(call):
    uid = str(call.message.chat.id)
    if call.data == "quiz_next":
        send_quiz(call.message.chat.id)
    else:
        data = user_data.get(uid, {"score": 0, "xp": 0})
        xp = data["xp"]
        lvl = "ü•â" if xp < 50 else ("ü•à" if xp < 150 else "ü•á")
        bar = "‚ñà" * min(10, xp // 10) + "‚ñë" * (10 - min(10, xp // 10))
        bot.send_message(
            call.message.chat.id,
            f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∞—è“õ—Ç–∞–ª–¥—ã!\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} {xp} XP\nüèÜ “∞–ø–∞–π: {data['score']}\nüî• –î–µ“£–≥–µ–π: {lvl}",
            parse_mode="Markdown"
        )

@bot.message_handler(func=lambda m: m.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
def progress(message):
    uid = str(message.chat.id)
    d = user_data.get(uid, {"known": [], "score": 0, "xp": 0})
    lvl = "ü•â –ë–∞—Å—Ç–∞—É—ã—à" if d["xp"] < 50 else "ü•à –û—Ä—Ç–∞" if d["xp"] < 150 else "ü•á –ñ–µ—Ç—ñ–∫"
    bar = "‚ñà" * min(10, d["xp"] // 10) + "‚ñë" * (10 - min(10, d["xp"] // 10))
    bot.send_message(
        message.chat.id,
        f"üìä *–°–µ–Ω—ñ“£ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ“£:*\n\nüìò “Æ–π—Ä–µ–Ω–≥–µ–Ω —Å”©–∑–¥–µ—Ä: {len(d['known'])}\n"
        f"üèÜ “∞–ø–∞–π: {d['score']}\nüî• XP: {d['xp']}\n{bar}\nüìà –î–µ“£–≥–µ–π: {lvl}",
        parse_mode="Markdown"
    )


# === Flask routes ===
@app.route("/", methods=["GET"])
def index():
    return "‚úÖ KazLangBot is running!", 200

@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    if request.method == "GET":
        return "Webhook active ‚úÖ", 200

    if request.method == "POST":
        update = request.get_json(force=True, silent=True)
        if update:
            bot.process_new_updates([telebot.types.Update.de_json(update)])
        return "ok", 200


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    print(f"üöÄ Server started on port {port}")
    app.run(host="0.0.0.0", port=port)
